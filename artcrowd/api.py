from django.shortcuts import get_object_or_404
from django.urls import path
from django.contrib.auth.models import Group
from django.core.exceptions import PermissionDenied, BadRequest
from django.db.models import Count
from django.utils import timezone
from django.http import HttpResponse
from django.conf import settings
from rest_framework import generics, permissions, serializers as drf_serializers
from rest_framework.parsers import MultiPartParser
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.authtoken.models import Token
from rest_framework.authtoken import views as auth_views
from rest_framework.throttling import ScopedRateThrottle
from rest_framework.filters import OrderingFilter, BaseFilterBackend
from drf_spectacular.views import SpectacularAPIView, SpectacularSwaggerView
from . import models, serializers, blockchain


class LoginByWalletView(auth_views.ObtainAuthToken):
    """Log users in by a Tezos address, a text message and a signature of this message generated by a Tezos wallet"""
    serializer_class = serializers.ACAuthTokenSerializer
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'logins'

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        token, created = Token.objects.get_or_create(user=user)
        return Response({'token': token.key, 'username': user.username, 'avatar': user.avatar.url if user.avatar else None})


class LogoutView(generics.views.APIView):
    def get(self, request):
        request.user.auth_token.delete()
        return Response()


class CheckinView(generics.views.APIView):
    """This endpoint is used to check whether the user is logged in or not,
    it returns 200 if the user is logged in and 401 otherwise"""
    permission_classes = [IsAuthenticated]

    def get(self, request):
        return Response()


class ProfileView(generics.RetrieveAPIView):
    queryset = models.User.objects.all()
    serializer_class = serializers.UserSerializer
    lookup_field = 'username'

    """def get1(self, request):
        data = {
            'projects': models.Project.objects.filter(artist=request.user).all(),
            'gallery_projects': models.Project.objects.filter(presenter=request.user).all(),
            'supported_projects': models.Project.objects.filter(project_shares__patron_id=request.user.id)
                                        .annotate(shares_num=Count('project_shares__id'))
        }
        serializer = serializers.ProjectListSerializer(data, context={'request': request})
        return Response(serializer.data)"""


class ProjectsList(generics.ListAPIView):
    """All projects"""

    class OpenFilterBackend(BaseFilterBackend):
        def filter_queryset(self, request, queryset, view):
            open_param = request.query_params.get('open')
            artist_param = request.query_params.get('artist')
            patron_param = request.query_params.get('patron')
            presenter_param = request.query_params.get('presenter')

            if open_param:
                if open_param in (True, "True", "true", "1"):
                    queryset = queryset.filter(status=models.Project.OPEN)
                elif open_param in (False, "False", "false", "0"):
                    queryset = queryset.exclude(status__in=[models.Project.COMPLETED, models.Project.SALE_CLOSED])
            if artist_param:
                queryset = queryset.filter(artist__username=artist_param)
            if patron_param:
                queryset = queryset.filter(project_shares__patron__username=patron_param)
            if presenter_param:
                queryset = queryset.filter(presenter__username=presenter_param)

            return queryset

    queryset = models.Project.objects.annotate(shares_num=Count('project_shares__id')).all()
    serializer_class = serializers.ProjectBriefSerializer
    filter_backends = [OpenFilterBackend, OrderingFilter]


class ProjectDetail(generics.RetrieveAPIView):
    """Project details"""
    queryset = models.Project.objects.all()
    serializer_class = serializers.ProjectSerializer


class ProjectUpdate(generics.CreateAPIView):
    """Post an update to the project"""
    queryset = models.ProjectUpdate.objects.all()
    parser_classes = [MultiPartParser]
    permission_classes = [permissions.DjangoModelPermissions]
    serializer_class = serializers.ProjectUpdateSerializer
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'updates'

    def perform_create(self, serializer):
        project_id = self.kwargs.get('pk')
        project = get_object_or_404(models.Project, pk=project_id)

        if self.request.user != project.artist and self.request.user != project.presenter:
            raise PermissionDenied('Only project artist or presenter can post updates')
        if (timezone.now() - project.last_update_time).total_seconds() < settings.UPDATE_POST_INTERVAL:
            raise BadRequest('You cannot post project updates more often than once in 12 hours')

        serializer.save(project=project, author=self.request.user)


class ProjectCreateView(generics.CreateAPIView):
    """Start a new project. If artist_id is provided then the endpoint is called by a gallery"""
    queryset = models.Project.objects.all()
    parser_classes = [MultiPartParser]
    serializer_class = serializers.ProjectCreateSerializer
    permission_classes = [permissions.DjangoModelPermissions]
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'projects'

    def perform_create(self, serializer: drf_serializers.Serializer):
        artist_id = self.kwargs.get('artist_id')
        if artist_id and (self.request.user.is_staff or Group.objects.get(name='Gallery').user_set
                                                            .filter(id=self.request.user.id).exists()):
            serializer.save(artist_id=artist_id, presenter=self.request.user)
        else:
            serializer.save(artist=self.request.user)


class ProjectMetadataView(generics.RetrieveAPIView):
    queryset = models.Project.objects.all()
    serializer_class = serializers.ProjectMetadataSerializer


class BuySharesView(generics.CreateAPIView):
    """Buy shares in the project"""
    serializer_class = serializers.BuySharesSerializer
    queryset = models.Share.objects.all()

    def perform_create(self, serializer):
        project = get_object_or_404(models.Project, id=self.kwargs['pk'])
        ophash = serializer.validated_data['ophash']
        num_shares, wallet = blockchain.get_bought_shares(ophash)
        if not (share := models.Share.objects.filter(ophash=ophash).first()):
            share = models.Share.objects.create(project=project, patron=self.request.user, quantity=num_shares,
                                                ophash=serializer.validated_data['ophash'])
            if project.max_shares and project.shares_num > project.max_shares:
                project.status = project.SALE_CLOSED
                project.save()
                blockchain.update_project_status(project)
        serializer._validated_data = share


def collection_meta(*args, **kwargs):
    with open('tezos/collection_meta.json', 'rb') as fp:
        return HttpResponse(fp.read(), headers={'Content-type': 'application/json'})


url_patterns = [
    path("login", auth_views.obtain_auth_token, name='login'),
    path("login-by-wallet", LoginByWalletView.as_view(), name='login_by_wallet'),
    path("logout", LogoutView.as_view(), name='logout'),
    path("checkin", CheckinView.as_view(), name='checkin'),
    path("profile/<str:username>", ProfileView.as_view(), name='profile'),
    path("projects", ProjectsList.as_view(), name='projects'),
    path("projects/<int:pk>", ProjectDetail.as_view(), name='project'),
    path("projects/<int:pk>/update", ProjectUpdate.as_view(), name='project_update'),
    path("projects/<int:pk>/buy", BuySharesView.as_view(), name='buy_shares'),
    path("projects/<int:pk>/metadata", ProjectMetadataView.as_view(), name='project_metadata'),
    path("projects/create", ProjectCreateView.as_view(), name='create_project_artist'),
    path("projects/create/for/<int:artist_id>", ProjectCreateView.as_view(), name='create_project_gallery'),

    path('schema/', SpectacularAPIView.as_view(), name='schema'),
    path('docs', SpectacularSwaggerView.as_view(url_name='schema')),
]